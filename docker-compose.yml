services:
  postgres:
    image: postgres:15-alpine
    container_name: cryptopulse-postgres
    environment:
      POSTGRES_DB: cryptopulse
      POSTGRES_USER: cryptopulse
      POSTGRES_PASSWORD: cryptopulse_dev
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptopulse -d cryptopulse"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cryptopulse-network

  # Redis for caching and session management (future use)
  redis:
    image: redis:7-alpine
    container_name: cryptopulse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cryptopulse-network

  # Application service (for development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: cryptopulse-app
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://cryptopulse:cryptopulse_dev@postgres:5432/cryptopulse?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - RPC_URL=https://test-dydx.kingnodes.com
      - INDEXER_URL=https://indexer.v4testnet.dydx.exchange/v4
      - CHAIN_ID=dydx-testnet-4
      - HTTP_PORT=:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/vendor
    working_dir: /app
    command: ["go", "run", "cmd/main.go"]
    networks:
      - cryptopulse-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  cryptopulse-network:
    driver: bridge
