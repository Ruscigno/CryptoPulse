# Multi-stage build for production environment
# Stage 1: Build stage
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata gcc musl-dev

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with production optimizations
# Disable race detection, enable all optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags="-w -s -extldflags '-static' -X main.version=$(git describe --tags --always --dirty) -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -tags netgo \
    -o cryptopulse \
    ./cmd/main.go

# Verify the binary
RUN ldd cryptopulse 2>&1 | grep -q "not a dynamic executable" || (echo "Binary is not static" && exit 1)

# Stage 2: Final production image using distroless
FROM gcr.io/distroless/static-debian12:nonroot

# Copy CA certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/cryptopulse .

# Copy configuration files
COPY --from=builder /app/pkg/database/migrations ./migrations/

# Expose port
EXPOSE 8080

# Set environment variables for production
ENV GIN_MODE=release \
    LOG_LEVEL=warn \
    LOG_FORMAT=json \
    ENVIRONMENT=production \
    TZ=UTC

# Health check (using the built-in health endpoint)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD ["/app/cryptopulse", "--health-check"]

# Use non-root user (distroless nonroot user)
USER nonroot:nonroot

# Default command
ENTRYPOINT ["./cryptopulse"]
